name: "Safe: Sync Upstream -> main"

on:
  workflow_dispatch:
  schedule:
    - cron: "0 6 * * *"

permissions:
  contents: write
  pull-requests: write
  workflows: write

concurrency:
  group: sync-upstream-main
  cancel-in-progress: false

jobs:
  sync-upstream-into-main:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo (full history)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure git user
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Set upstream remote and fetch
        shell: bash
        run: |
          set -e
          if git remote get-url upstream >/dev/null 2>&1; then
            git remote set-url upstream "https://github.com/gitroomhq/postiz-app.git"
          else
            git remote add upstream "https://github.com/gitroomhq/postiz-app.git"
          fi
          git fetch --prune upstream
          git fetch --prune origin

      - name: Configure origin with PAT for pushes
        shell: bash
        run: |
          set -e
          git remote set-url origin "https://x-access-token:${{ secrets.SYNC_TOKEN }}@github.com/${{ github.repository }}.git"
      - name: Align local main to origin/main
        shell: bash
        run: |
          set -e
          if git ls-remote --exit-code --heads origin main >/dev/null 2>&1; then
            git checkout -B main origin/main
          else
            git checkout -B main
          fi

      - name: Try fast-forward merge upstream/main -> main
        id: ff_attempt
        shell: bash
        run: |
          set +e
          if git ls-remote --exit-code --heads upstream main >/dev/null 2>&1; then
            git merge --ff-only upstream/main
            status=$?
            if [ "$status" -eq 0 ]; then
              echo "status=ff" >> "$GITHUB_OUTPUT"
            else
              echo "status=diverged" >> "$GITHUB_OUTPUT"
            fi
          else
            echo "status=no-upstream-main" >> "$GITHUB_OUTPUT"
          fi

      - name: Push main when fast-forward succeeded
        if: steps.ff_attempt.outputs.status == 'ff'
        run: git push origin main

      - name: Prepare PR from upstream head (no branch push)
        if: steps.ff_attempt.outputs.status == 'diverged'
        run: echo "Opening PR using head gitroomhq:main; no fork branch push due to workflow file restrictions"

      - name: Open PR upstream -> main (when diverged)
        if: steps.ff_attempt.outputs.status == 'diverged'
        uses: actions/github-script@v7
        with:
          script: |
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            // Use upstream branch directly as PR head to avoid pushing branches that include workflow file changes
            const head = 'gitroomhq:main';
            const base = 'main';
            const title = 'Sync: upstream â†’ main (review/resolve if conflicts)';
            const body = [
              'This PR brings upstream/main into your main.',
              '',
              '- Upstream is fetch-only; no pushes to upstream.',
              '- The PR uses upstream/main as the head branch (no fork branch push).',
              '- If GitHub reports conflicts, resolve them in this PR UI.',
              '- After merging, your main will be updated to include upstream changes.',
            ].join('\n');
            try {
              // Avoid duplicate PRs with the same head/base
              const { data: prs } = await github.rest.pulls.list({
                owner, repo, state: 'open', head: head, base
              });
              if (prs.length > 0) {
                core.info(`Existing PR found: #${prs[0].number}`);
              } else {
                const { data: pr } = await github.rest.pulls.create({
                  owner, repo, title, head, base, body
                });
                core.info(`Created PR #${pr.number}`);
              }
            } catch (e) {
              core.setFailed(`Failed to create PR: ${e.message}`);
            }
